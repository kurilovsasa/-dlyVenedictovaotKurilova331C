package module_02_gadzhibatyrov.src.ui;

import module_02_gadzhibatyrov.src.DbConnector;
import javax.swing.*;
import java.awt.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

public class DiscountCalculatorUI extends JPanel {
    private JComboBox<String> partnerDropdown, productDropdown; // –í—ã–ø–∞–¥–∞—é—â–∏–µ –º–µ–Ω—é
    private JTextField totalSalesField;
    private JLabel discountLabel;
    private JButton calculateButton, updateButton;

    public DiscountCalculatorUI(DbConnector db) {
        setLayout(new GridLayout(5, 2, 10, 10));

        JLabel partnerLabel = new JLabel("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞:");
        partnerDropdown = new JComboBox<>(loadPartnersFromDB());
        partnerDropdown.addActionListener(e -> updateProductDropdown()); //–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ü–∏–∏

        JLabel productLabel = new JLabel("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ü–∏—é:");
        productDropdown = new JComboBox<>();

        JLabel salesLabel = new JLabel("–û–±—â–∏–π –æ–±—ä—ë–º –ø—Ä–æ–¥–∞–∂:");
        totalSalesField = new JTextField();

        JLabel discountTextLabel = new JLabel("–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞:");
        discountLabel = new JLabel("0%");

        calculateButton = new JButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∫–∏–¥–∫—É");
        updateButton = new JButton("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ");

        calculateButton.addActionListener(e -> calculateDiscount());
        updateButton.addActionListener(e -> updateDatabase());

        add(partnerLabel);
        add(partnerDropdown);
        add(productLabel);
        add(productDropdown);
        add(salesLabel);
        add(totalSalesField);
        add(discountTextLabel);
        add(discountLabel);
        add(calculateButton);
        add(updateButton);
    }

    private String[] loadPartnersFromDB() {
        ArrayList<String> partners = new ArrayList<>();
        try (Connection conn = module_02_gadzhibatyrov.src.DbConnector.connect()) {
            String sql = "SELECT DISTINCT partner_name FROM sales_history";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                partners.add(rs.getString("partner_name"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤: " + e.getMessage(), "–û—à–∏–±–∫–∞", JOptionPane.ERROR_MESSAGE);
        }

        if (partners.isEmpty()) {
            partners.add("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤"); //–ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
        }

        return partners.toArray(new String[0]);
    }

    private void updateProductDropdown() {
        String selectedPartner = (String) partnerDropdown.getSelectedItem();
        if (selectedPartner == null || selectedPartner.equals("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤")) {
            return;
        }

        productDropdown.removeAllItems(); // —á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ

        try (Connection conn = module_02_gadzhibatyrov.src.DbConnector.connect()) {
            String sql = "SELECT DISTINCT product_name FROM sales_history WHERE partner_name = ?";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, selectedPartner);
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                productDropdown.addItem(rs.getString("product_name"));
            }

            if (productDropdown.getItemCount() == 0) {
                productDropdown.addItem("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏: " + e.getMessage(), "–û—à–∏–±–∫–∞", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void calculateDiscount() {
        try {
            int totalSales = Integer.parseInt(totalSalesField.getText());
            float discount = calculateDiscountRate(totalSales);
            discountLabel.setText(discount + "%");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.", "–û—à–∏–±–∫–∞", JOptionPane.ERROR_MESSAGE);
        }
    }

    private float calculateDiscountRate(int totalSales) {
        if (totalSales < 10_000) return 0.0f;
        if (totalSales < 50_000) return 5.0f;
        if (totalSales < 300_000) return 10.0f;
        return 15.0f;
    }

    private void updateDatabase() {
        try (Connection conn = module_02_gadzhibatyrov.src.DbConnector.connect()) {
            conn.setAutoCommit(false);
            String selectedPartner = (String) partnerDropdown.getSelectedItem();
            String selectedProduct = (String) productDropdown.getSelectedItem();
            int totalSales = Integer.parseInt(totalSalesField.getText());
            float discount = calculateDiscountRate(totalSales);

            String checkSql = "SELECT COUNT(*) FROM rate WHERE name = ?";
            PreparedStatement checkStmt = conn.prepareStatement(checkSql);
            checkStmt.setString(1, selectedPartner);
            ResultSet rs = checkStmt.executeQuery();
            rs.next();

            if (rs.getInt(1) > 0) {
                // –ü–∞—Ä—Ç–Ω—ë—Ä —É–∂–µ –µ—Å—Ç—å ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                String updateSql = "UPDATE rate SET total_sales = ?, discount_rate = ? WHERE name = ?";
                PreparedStatement updateStmt = conn.prepareStatement(updateSql);
                updateStmt.setInt(1, totalSales);
                updateStmt.setFloat(2, discount);
                updateStmt.setString(3, selectedPartner);
                updateStmt.executeUpdate();
                System.out.println("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!");
                conn.commit();
            } else {
                // üîπ –ï—Å–ª–∏ –ø–∞—Ä—Ç–Ω—ë—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                String insertSql = "INSERT INTO rate (name, total_sales, discount_rate) VALUES (?, ?, ?)";
                PreparedStatement insertStmt = conn.prepareStatement(insertSql);
                insertStmt.setString(1, selectedPartner);
                insertStmt.setInt(2, totalSales);
                insertStmt.setFloat(3, discount);
                insertStmt.executeUpdate();
                System.out.println("‚úÖ –ù–æ–≤—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä –¥–æ–±–∞–≤–ª–µ–Ω!");
                conn.commit();
            }
            JOptionPane.showMessageDialog(this, "‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", "–£—Å–ø–µ—Ö", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage(), "–û—à–∏–±–∫–∞", JOptionPane.ERROR_MESSAGE);
        }
    }
}
