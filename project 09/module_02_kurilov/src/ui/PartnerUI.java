package module_02_gadzhibatyrov.src.ui;

import module_02_gadzhibatyrov.src.DbConnector;
import javax.swing.*;
import java.awt.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class PartnerUI extends JFrame {
    private final DbConnector db;
    private JPanel partnerListPanel;
    private JTabbedPane tabbedPane;

    public PartnerUI(DbConnector dbConnector) {
        setTitle("–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º–∏");
        setIconImage(Toolkit.getDefaultToolkit().getImage("src/img/logo.png"));
        this.db = dbConnector;
        setSize(900, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());


        tabbedPane = new JTabbedPane();
        add(tabbedPane, BorderLayout.CENTER);

        // –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        JPanel controlPanel = new JPanel();
        JButton addButton = new JButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å");
        JButton editButton = new JButton("‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å");
        JButton deleteButton = new JButton("‚ùå –£–¥–∞–ª–∏—Ç—å");

        controlPanel.add(addButton);
        controlPanel.add(editButton);
        controlPanel.add(deleteButton);
        add(controlPanel, BorderLayout.NORTH);

        addButton.addActionListener(e -> addPartner());
        editButton.addActionListener(e -> editPartner());
        deleteButton.addActionListener(e -> deletePartner());


        // –ü–∞–Ω–µ–ª—å —Å–ø–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤
        partnerListPanel = new JPanel();
        partnerListPanel.setLayout(new GridLayout(0, 1, 10, 10));
        tabbedPane.add("–ü–∞—Ä—Ç–Ω—ë—Ä—ã", new JScrollPane(partnerListPanel));

        tabbedPane.addTab("–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂", new module_02_gadzhibatyrov.src.ui.SalesHistoryUI(db));
        tabbedPane.addTab("–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏", new DiscountCalculatorUI(db));

        tabbedPane.addChangeListener(e -> {
            int selectedIndex = tabbedPane.getSelectedIndex();
            String selectedTab = tabbedPane.getTitleAt(selectedIndex);

            if ("–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂".equals(selectedTab)  || "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏".equals(selectedTab)) {
                controlPanel.setVisible(false); // üîπ **–°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**
            } else {
                controlPanel.setVisible(true); //–û—Ç–æ–±—Ä–∞–∂–∞–µ–º, –µ—Å–ª–∏ "–ü–∞—Ä—Ç–Ω—ë—Ä—ã"
            }
        });

        loadPartners();
        setVisible(true);
    }

    private void loadPartners() {
        Connection connection = db.connect();
        if (connection == null) return;

        try {
            String sql = "SELECT partner_id, partner_type, name, director, phone, rating FROM partners";
            PreparedStatement stmt = connection.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();

            partnerListPanel.removeAll();

            while (rs.next()) {
                JPanel card = new JPanel(new BorderLayout());
                card.setBorder(BorderFactory.createLineBorder(Color.GRAY, 2)); // –°–µ—Ä—ã–π —Ç–æ–Ω –¥–ª—è —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                card.setBackground(new Color(240, 240, 240)); // –°–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω
                card.setPreferredSize(new Dimension(850, 100)); // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä

                JLabel typeLabel = new JLabel(rs.getString("partner_type") + " | " + rs.getString("name"));
                typeLabel.setFont(new Font("Arial", Font.BOLD, 16));

                JLabel directorLabel = new JLabel("<html><b>–î–∏—Ä–µ–∫—Ç–æ—Ä:</b> " + rs.getString("director") + "</html>");
                JLabel phoneLabel = new JLabel("<html><b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> " + rs.getString("phone") + "</html>");
                JLabel ratingLabel = new JLabel("<html><b>–†–µ–π—Ç–∏–Ω–≥:</b> " + rs.getInt("rating") + "</html>");

                JPanel textPanel = new JPanel(new GridLayout(3, 1));
                textPanel.setBackground(new Color(240, 240, 240)); // –°–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π
                textPanel.add(typeLabel);
                textPanel.add(directorLabel);
                textPanel.add(phoneLabel);

                ratingLabel.setHorizontalAlignment(SwingConstants.RIGHT);

                card.add(textPanel, BorderLayout.WEST);
                card.add(ratingLabel, BorderLayout.EAST);

                partnerListPanel.add(card);
            }

            partnerListPanel.revalidate();
            partnerListPanel.repaint();
            connection.close();

        } catch (Exception e) {
            System.out.println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage());
        }
    }

    private void addPartner() {
        String[] partnerTypes = {"–û–û–û", "–ó–ê–û", "–ò–ü", "–ü–ê–û", "–ì–æ—Å–∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è"};
        JComboBox<String> typeBox = new JComboBox<>(partnerTypes);
        JOptionPane.showMessageDialog(this, typeBox, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∞—Ä—Ç–Ω—ë—Ä–∞", JOptionPane.QUESTION_MESSAGE);
        String partnerType = (String) typeBox.getSelectedItem();

        String name = JOptionPane.showInputDialog(this, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞:");
        if (name == null || name.trim().isEmpty()) return;

        String director = JOptionPane.showInputDialog(this, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:");
        if (director == null || director.trim().isEmpty()) return;

        String phone = JOptionPane.showInputDialog(this, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:");
        if (phone == null || phone.trim().isEmpty()) return;

        String ratingStr = JOptionPane.showInputDialog(this, "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ (1-10):");
        if (ratingStr == null || ratingStr.trim().isEmpty()) return;

        int rating = Integer.parseInt(ratingStr);

        Connection connection = db.connect();
        if (connection != null) {
            try {
                String sql = "INSERT INTO partners (partner_type, name, director, phone, rating) VALUES (?, ?, ?, ?, ?)";
                PreparedStatement stmt = connection.prepareStatement(sql);
                stmt.setString(1, partnerType);
                stmt.setString(2, name);
                stmt.setString(3, director);
                stmt.setString(4, phone);
                stmt.setInt(5, rating);
                stmt.executeUpdate();
                loadPartners();
                connection.close();
            } catch (Exception e) {
                System.out.println("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞: " + e.getMessage());
            }
        }
    }

    private String selectPartner(String message) {
        Connection connection = db.connect();
        if (connection == null) return null;

        try {
            String sql = "SELECT name FROM partners";
            PreparedStatement stmt = connection.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();

            DefaultListModel<String> model = new DefaultListModel<>();
            while (rs.next()) {
                model.addElement(rs.getString("name"));
            }
            connection.close();

            JList<String> list = new JList<>(model);
            int option = JOptionPane.showConfirmDialog(this, new JScrollPane(list), message, JOptionPane.OK_CANCEL_OPTION);

            return (option == JOptionPane.OK_OPTION) ? list.getSelectedValue() : null;

        } catch (Exception e) {
            System.out.println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤: " + e.getMessage());
            return null;
        }
    }


    private void editPartner() {
        String selectedPartner = selectPartner("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:");
        if (selectedPartner == null) return;

        String[] partnerTypes = {"–û–û–û", "–ó–ê–û", "–ò–ü", "–ü–ê–û", "–ì–æ—Å–∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è"};
        JComboBox<String> typeBox = new JComboBox<>(partnerTypes);
        JOptionPane.showMessageDialog(this, typeBox, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –ø–∞—Ä—Ç–Ω—ë—Ä–∞", JOptionPane.QUESTION_MESSAGE);
        String partnerType = (String) typeBox.getSelectedItem();

        String name = JOptionPane.showInputDialog(this, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:");
        String director = JOptionPane.showInputDialog(this, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:");
        String phone = JOptionPane.showInputDialog(this, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:");
        String ratingStr = JOptionPane.showInputDialog(this, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (1-10):");
        if (ratingStr == null || ratingStr.trim().isEmpty()) return;

        int rating = Integer.parseInt(ratingStr);

        Connection connection = db.connect();
        if (connection != null) {
            try {
                String sql = "UPDATE partners SET partner_type = ?, name = ?, director = ?, phone = ?, rating = ? WHERE name = ?";
                PreparedStatement stmt = connection.prepareStatement(sql);
                stmt.setString(1, partnerType);
                stmt.setString(2, name);
                stmt.setString(3, director);
                stmt.setString(4, phone);
                stmt.setInt(5, rating);
                stmt.setString(6, selectedPartner);
                stmt.executeUpdate();
                loadPartners();
                connection.close();
            } catch (Exception e) {
                System.out.println("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞: " + e.getMessage());
            }
        }
    }

    private void deletePartner() {
        String selectedPartner = selectPartner("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:");
        if (selectedPartner == null) return;

        Connection connection = db.connect();
        if (connection != null) {
            try {
                String sql = "DELETE FROM partners WHERE name = ?";
                PreparedStatement stmt = connection.prepareStatement(sql);
                stmt.setString(1, selectedPartner);
                int rowsAffected = stmt.executeUpdate();
                connection.close();

                if (rowsAffected == 0) {
                    JOptionPane.showMessageDialog(this, "‚ùå –ü–∞—Ä—Ç–Ω—ë—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", "–û—à–∏–±–∫–∞", JOptionPane.ERROR_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "‚úÖ –ü–∞—Ä—Ç–Ω—ë—Ä —É–¥–∞–ª—ë–Ω!", "–£—Å–ø–µ—Ö", JOptionPane.INFORMATION_MESSAGE);
                    loadPartners();
                }
            } catch (Exception e) {
                System.out.println("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞: " + e.getMessage());
            }
        }
    }
}
