package module_02_gadzhibatyrov.src.ui;

import module_02_gadzhibatyrov.src.DbConnector;
import module_01_gadzhibatyrov.src.ExcelToDB;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class SalesHistoryUI extends JPanel {
    private final DbConnector db;
    private JTable table;
    private DefaultTableModel tableModel;

    public SalesHistoryUI(DbConnector dbConnector) {
        this.db = dbConnector;
        setLayout(new BorderLayout());

        // **–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏**
        tableModel = new DefaultTableModel();
        tableModel.setColumnIdentifiers(new String[]{"–ü—Ä–æ–¥—É–∫—Ü–∏—è", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏"});
        table = new JTable(tableModel);
        add(new JScrollPane(table), BorderLayout.CENTER);

        // **–ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö**
        JButton uploadButton = new JButton("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–¥–∞–∂");
        uploadButton.addActionListener(e -> uploadExcelFile());
        add(uploadButton, BorderLayout.NORTH);

        loadSalesHistoryFromDB(); // **–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î**

        table = new JTable(tableModel);
        table.setRowHeight(25); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫
        table.setFont(new Font("Arial", Font.PLAIN, 14)); // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
        table.setGridColor(Color.LIGHT_GRAY); // –ü–æ–ª–æ—Å—ã –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏
        table.setSelectionBackground(new Color(173, 216, 230)); // –¶–≤–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫

        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setBorder(BorderFactory.createLineBorder(Color.GRAY, 2)); // –†–∞–º–∫–∞ –≤–æ–∫—Ä—É–≥ —Ç–∞–±–ª–∏—Ü—ã
        add(scrollPane, BorderLayout.CENTER);

    }

    private void uploadExcelFile() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø—Ä–æ–¥–∞–∂");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String filePath = selectedFile.getAbsolutePath();

            try (Connection connection = db.connect()) {
                if (connection != null) {
                    tableModel.setRowCount(0); // üîπ –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º

                    boolean success = ExcelToDB.importSalesHistory(connection, filePath);

                    if (success) {
                        loadSalesHistoryFromDB(); // üîπ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                        JOptionPane.showMessageDialog(this, "‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!", "–£—Å–ø–µ—Ö", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –¥–∞—Ç—ã.", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ!", "–û—à–∏–±–∫–∞", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: " + e.getMessage(), "–û—à–∏–±–∫–∞", JOptionPane.ERROR_MESSAGE);
            }
        }
    }


    private void loadSalesHistoryFromDB() {
        tableModel.setRowCount(0); // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ GUI

        try (Connection connection = db.connect()) {
            if (connection == null) {
                JOptionPane.showMessageDialog(this, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!", "–û—à–∏–±–∫–∞", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String sql = "SELECT product_name, partner_name, quantity, sale_date FROM sales_history ORDER BY sale_date DESC";
            PreparedStatement stmt = connection.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                Object[] row = {
                        rs.getString("product_name"),
                        rs.getString("partner_name"),
                        rs.getInt("quantity"),
                        rs.getDate("sale_date").toString() // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
                };
                tableModel.addRow(row); // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            }

            tableModel.fireTableDataChanged(); // –û–±–Ω–æ–≤–ª—è–µ–º GUI
            table.repaint();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂: " + e.getMessage(), "–û—à–∏–±–∫–∞", JOptionPane.ERROR_MESSAGE);
        }
    }
}

